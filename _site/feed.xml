<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-18T05:42:25+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Keep Going</title><author><name>kun</name></author><entry><title type="html">Collections.unmodifiableList() vs List.copyOf()</title><link href="http://localhost:4000/java/copyOf()vsUnmodifiable/" rel="alternate" type="text/html" title="Collections.unmodifiableList() vs List.copyOf()" /><published>2022-03-14T00:00:00+09:00</published><updated>2022-03-14T00:00:00+09:00</updated><id>http://localhost:4000/java/copyOf()vsUnmodifiable</id><content type="html" xml:base="http://localhost:4000/java/copyOf()vsUnmodifiable/"><![CDATA[<p>이전 내용을 간략하게 요약해보자.<br />
인자로 들어올 원본 List의 변화가 객체 내부 필드의 변화까지 일어나지 않게 하기 위해 방어적 복사를 해주었다.<br />
방어적 복사를 하게 되면, 원본 List와 객체 내부 필드의 참조 값이 달라지면서, 외부의 변화에 대해 막아줄 수 있었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">(</span><span class="n">initialCards</span><span class="o">);</span> <span class="c1">// new ArrayList&lt;&gt;()를 이용해 복사본을 만들었다. -&gt; 방어적 복사</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cards</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그렇다면, 이제 <code class="language-plaintext highlighter-rouge">List&lt;Card&gt; cards</code>를 외부에서의 변화에 걱정하지 않고 사용할 수 있을까? <br />
아니다. <code class="language-plaintext highlighter-rouge">getCards()</code>로 리스트를 불러와, 변경시킨다면 Cards의 필드에도 변화가 가해질 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">initialCards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">DIAMOND</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">FIVE</span><span class="o">));</span>
        <span class="n">initialCards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">DIAMOND</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">FOUR</span><span class="o">));</span>

        <span class="nc">Cards</span> <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cards</span><span class="o">(</span><span class="n">initialCards</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Card</span> <span class="n">card</span> <span class="o">:</span> <span class="n">cards</span><span class="o">.</span><span class="na">getCards</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"card = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">", card content = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">.</span><span class="na">getDenomination</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">card</span><span class="o">.</span><span class="na">getSymbol</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="n">cards</span><span class="o">.</span><span class="na">getCards</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">HEART</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">THREE</span><span class="o">));</span> <span class="c1">// getter()로 List를 불러와 새로운 Card 추가</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Card</span> <span class="n">card</span> <span class="o">:</span> <span class="n">cards</span><span class="o">.</span><span class="na">getCards</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"card = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">", card content = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">.</span><span class="na">getDenomination</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">card</span><span class="o">.</span><span class="na">getSymbol</span><span class="o">());</span>
        <span class="o">}</span>

    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/67885363/158881619-6675b204-5f18-41ac-a12a-a10cc17c6328.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">Cards</code>의 <code class="language-plaintext highlighter-rouge">getter()</code>를 이용해 List를 불러와 새로운 카드를 추가하였다.<br />
그렇다면, <code class="language-plaintext highlighter-rouge">getter()</code>에서도 필드를 그대로 반환해주는 것이 아닌, 방어적 복사를 해서 외부에서의 변화를 막아주자.</p>

<p><br /></p>

<h3 id="첫번째-방법-new-arraylist">첫번째 방법, new ArrayList()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>
  
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">(</span><span class="n">initialCards</span><span class="o">);</span> <span class="c1">// new ArrayList&lt;&gt;()를 이용해 복사본을 만들었다. -&gt; 방어적 복사</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">getter()</code>에서도 방어적 복사를 함으로써, 필드의 참조값과 <code class="language-plaintext highlighter-rouge">getCards()</code>가 반환하는 List의 참조 값을 다르게 해주었다.</p>

<p><br /></p>

<h3 id="두번째-방법-collectionsunmodifiablelist">두번째 방법, Collections.unmodifiableList()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">initialCards</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/67885363/158884061-518ed7d1-641f-47a2-8849-14a1a71baf3a.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">Unmodifiable Collection</code>을 이용하는 경우에, 외부에서 변경 시 예외가 발생한다.<br />
<code class="language-plaintext highlighter-rouge">unmodifiableList()</code> 메서드를 통해 리턴되는 리스트는 읽기 용도로만 사용할 수 있다.<br />
리스트에 변경을 가하는 메서드를 호출하면 <code class="language-plaintext highlighter-rouge">UnsupportedOperationException</code> 이 발생한다.</p>

<p><br /></p>

<h3 id="세번째-방법-listcopyof">세번째 방법, List.copyOf()</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">initialCards</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">List</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/67885363/158885545-095c9184-bffd-494c-92f7-de5dff8d5b93.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">copyOf</code>를 이용하였을 때도 <code class="language-plaintext highlighter-rouge">UnsupportedOperationException</code>이 발생했다.
<code class="language-plaintext highlighter-rouge">List.copyOf()</code>로 반환되는 List도 수정이 불가한가보다.
그렇다면, <code class="language-plaintext highlighter-rouge">Collections.unmodifiableList()</code>와 <code class="language-plaintext highlighter-rouge">List.copyOf()</code>의 차이가 뭘까?</p>

<p><br /></p>

<h3 id="collectionsunmodifiablelist-vs-listcopyof">Collections.unmodifiableList() vs List.copyOf()</h3>

<p>둘의 차이점을 알아보기 위해, 간단한 코드를 작성해보겠다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOfTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">values</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">unmodifiableList</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">values</span><span class="o">);</span>
        
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">copyOfList</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">values</span><span class="o">);</span>

        <span class="n">values</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"===========unmodifiableList==============="</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">unmodifiableList</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"===========copyOf================"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="n">integer</span> <span class="o">:</span> <span class="n">copyOfList</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 결과 값은 어떻게 될까?</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/67885363/158887087-dbfcc0e1-b411-4209-9f19-4a6be120d746.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">unmodifiableList</code>는 원본 값에 영향을 받고 있다.<br />
원본 리스트에 새로운 값을 추가해주니, 변화하였다.<br />
하지만, <code class="language-plaintext highlighter-rouge">copyOfList</code>는 변화하지 않았다. 왜?<br />
<code class="language-plaintext highlighter-rouge">List.copyOf</code>는  원본과의 참조를 끊어주기 때문이다.</p>

<p>차이점으로, <code class="language-plaintext highlighter-rouge">Collections.unmodifiableList()</code>로는  참조가 끊어져 있지 않다.<br />
 따라서, <code class="language-plaintext highlighter-rouge">Collections.unmodifiableList()</code>로 반환한 리스트를 직접 수정할 수는 없지만, 원본 리스트를 수정한다면 함께 수정이 일어난다.<br /></p>

<p><code class="language-plaintext highlighter-rouge">Unmodifiable</code>과 <code class="language-plaintext highlighter-rouge">Immutable</code>은 다르다.<br />
 <code class="language-plaintext highlighter-rouge">Unmodifiable</code>이라는 키워드가 불변을 보장해주지는 않는다.<br />
원본 자체에 대한 수정이 일어나면 <code class="language-plaintext highlighter-rouge">unmodifiableList()</code> 메서드를 통해 리턴되었던 리스트 또한 변경이 일어난다.</p>

<p><br /></p>

<h3 id="이제-정말-불변일까">이제, 정말 불변일까?</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">initialCards</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">List</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">cards</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>생성자에 들어올 원본 리스트와의 주소 값도 끊어주었고, <code class="language-plaintext highlighter-rouge">getCards()</code>로 리스트를 반환할 때도 <code class="language-plaintext highlighter-rouge">copyOf()</code>를 이용해, 외부에서의 변화에 대해 막아주었다.<br />
하지만, <code class="language-plaintext highlighter-rouge">new ArrayList()</code>, <code class="language-plaintext highlighter-rouge">Collections.unmodifiableList()</code>, <code class="language-plaintext highlighter-rouge">copyOf()</code> 모두 깊은 복사를 한 것이 아니다.<br />
즉, 리스트의 참조 값만 끊어 준 것이지, 리스트 내부의 객체 참조 값은 동일하다.<br />
만약 Card 클래스에 <code class="language-plaintext highlighter-rouge">setter()</code>가 존재한다면, <code class="language-plaintext highlighter-rouge">cards</code>는 외부에서 얼마든지 변할 수 있다.<br />
그렇다고 꼭 깊은 복사를 해야한다는 것은 아니다.<br />
<code class="language-plaintext highlighter-rouge">Card</code>가 불변 객체라면, 방어적 복사만으로도 <code class="language-plaintext highlighter-rouge">cards</code>는 충분히 안전한 리스트라고 할 수 있다고 생각한다.</p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[이전 내용을 간략하게 요약해보자. 인자로 들어올 원본 List의 변화가 객체 내부 필드의 변화까지 일어나지 않게 하기 위해 방어적 복사를 해주었다. 방어적 복사를 하게 되면, 원본 List와 객체 내부 필드의 참조 값이 달라지면서, 외부의 변화에 대해 막아줄 수 있었다.]]></summary></entry><entry><title type="html">방어적 복사</title><link href="http://localhost:4000/java/%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EB%9E%80/" rel="alternate" type="text/html" title="방어적 복사" /><published>2022-03-13T00:00:00+09:00</published><updated>2022-03-13T00:00:00+09:00</updated><id>http://localhost:4000/java/%EB%B0%A9%EC%96%B4%EC%A0%81%20%EB%B3%B5%EC%82%AC%EB%9E%80</id><content type="html" xml:base="http://localhost:4000/java/%EB%B0%A9%EC%96%B4%EC%A0%81-%EB%B3%B5%EC%82%AC%EB%9E%80/"><![CDATA[<h2 id="방어적-복사란">방어적 복사란</h2>

<p>생성자를 통해 초기화 할 때, 새로운 객체로 감싸서 복사해주는 방법이다.
외부와 내부에서 주소값을 공유하는 인스턴스의 관계를 끊어주기 위함이다.
방어적 복사를 하지 않는다면, 외부(원본) List에서 리스트에 값을 추가할 시, 내부의 List에도 값이 추가 될 것이다.</p>

<h3 id="방어적-복사를-하지-않은-경우">방어적 복사를 하지 않은 경우</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="n">initialCards</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cards</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">initialCards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">DIAMOND</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">FIVE</span><span class="o">));</span>
        <span class="n">initialCards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">DIAMOND</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">FOUR</span><span class="o">));</span>

        <span class="nc">Cards</span> <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cards</span><span class="o">(</span><span class="n">initialCards</span><span class="o">);</span>
      	<span class="n">initialCards</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Card</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Symbol</span><span class="o">.</span><span class="na">DIAMOND</span><span class="o">,</span> <span class="nc">Denomination</span><span class="o">.</span><span class="na">NINE</span><span class="o">));</span> <span class="c1">// 원본 리스트에서 값 추가</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Card</span> <span class="n">card</span> <span class="o">:</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// initialCards는 당연히 3개가 나올테고</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"card = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">", card content = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">.</span><span class="na">getDenomination</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">card</span><span class="o">.</span><span class="na">getSymbol</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Card</span> <span class="n">card</span> <span class="o">:</span> <span class="n">cards</span><span class="o">.</span><span class="na">getCards</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// initalCards에 카드를 추가하기 전에, Cards 객체를 먼저 만들었으니까 사이즈가 2이지 않을까?</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"card = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">", card content = "</span> <span class="o">+</span> <span class="n">card</span><span class="o">.</span><span class="na">getDenomination</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">card</span><span class="o">.</span><span class="na">getSymbol</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>이 실행 결과는 어떻게 될까?<br />
Cards 메서드로 조작하는 것이 아닌, Cards를 생성할 때, 인자로 들어올 <code class="language-plaintext highlighter-rouge">initialCards</code>리스트에서 새로운 Card 객체를 추가하였다.</p>

<p>인자로 들어올 리스트(외부)를 변경하니, Cards의 내부 List에서도 변경되었다.
이유가 뭘까?</p>

<p><img src="https://user-images.githubusercontent.com/67885363/158861419-22c3b5f3-cfe4-496b-9a51-c50cb401f449.png" alt="image" style="zoom:100%;" /></p>

<p>인자로 들어올 리스트 <code class="language-plaintext highlighter-rouge">initialCards</code>와 <code class="language-plaintext highlighter-rouge">Cards</code>의 필드인 <code class="language-plaintext highlighter-rouge">cards</code>가 주소를 공유하고 있기 때문이다.<br />
그러면, Cards 객체를 생성할 때, 원본과의 주소 공유를 끊어내보자.</p>

<p><br /></p>

<h3 id="방어적-복사를-한-경우">방어적 복사를 한 경우</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Cards</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">cards</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Cards</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="n">initialCards</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cards</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">(</span><span class="n">initialCards</span><span class="o">);</span> <span class="c1">// new ArrayList&lt;&gt;()를 이용해 복사본을 만들었다.</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Card</span><span class="o">&gt;</span> <span class="nf">getCards</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cards</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">new ArrayList&lt;&gt;(initialCards)</code>를 통해 새로운 주소값을 참조하도록 복사하였다.<br />
이렇게 되면 외부에서 넘겨주는 List와 내부적으로 사용하는 List가 참조하는 값이 다르기 때문에 외부에서 제어가 불가능해진다.</p>

<p><img src="https://user-images.githubusercontent.com/67885363/158861097-e4dd8fd0-6924-4462-8aaa-a28457abcf6f.png" alt="image" /></p>

<p>방어적 복사를 함으로써, 원본 리스트와 객체 내부 리스트의 참조 값이 달라지게 되었다.</p>

<p>그러면, <code class="language-plaintext highlighter-rouge">Cards</code>의 리스트는 외부의 변경에 안전하게 되었을까? 
아니다. <code class="language-plaintext highlighter-rouge">getCards().add()</code>를 한다면 새로운 값이 추가가 될 것이다.
이것 또한 막아주는 방법이 있다. 
이 내용은 다음 포스팅의 <code class="language-plaintext highlighter-rouge">copyOf()</code>와 <code class="language-plaintext highlighter-rouge">Collections.Unmodifiable</code>을 비교하면서 다루겠다.</p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[방어적 복사란]]></summary></entry><entry><title type="html">클래스와 객체</title><link href="http://localhost:4000/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B0%9D%EC%B2%B4/" rel="alternate" type="text/html" title="클래스와 객체" /><published>2022-03-10T00:00:00+09:00</published><updated>2022-03-10T00:00:00+09:00</updated><id>http://localhost:4000/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80%20%EA%B0%9D%EC%B2%B4</id><content type="html" xml:base="http://localhost:4000/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EA%B0%9D%EC%B2%B4/"><![CDATA[]]></content><author><name>kun</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">절차지향 vs 객체지향</title><link href="http://localhost:4000/java/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EA%B3%BC-%EC%A0%88%EC%B0%A8%EC%A7%80%ED%96%A5/" rel="alternate" type="text/html" title="절차지향 vs 객체지향" /><published>2022-03-09T00:00:00+09:00</published><updated>2022-03-09T00:00:00+09:00</updated><id>http://localhost:4000/java/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EA%B3%BC%20%EC%A0%88%EC%B0%A8%EC%A7%80%ED%96%A5</id><content type="html" xml:base="http://localhost:4000/java/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EA%B3%BC-%EC%A0%88%EC%B0%A8%EC%A7%80%ED%96%A5/"><![CDATA[<h2 id="절차지향-vs-객체지향">절차지향 vs 객체지향</h2>

<h3 id="절차-지향">절차 지향</h3>

<p>프로시저로 프로그램을 구성하는 기법을 절차 지향 프로그래밍이라고 부른다.</p>

<ul>
  <li>프로시저는 데이터를 사용해서 기능을 구현한다.</li>
  <li>프로시저는 다른 프로시저를 사용하기도 한다.</li>
  <li>여러 프로시저가 동일한 데이터를 공유한다.</li>
</ul>

<p>다수의 프로시저들이 데이터를 공유하는 방식으로 만들어지기 때문에, 절차 지향 프로그램은 자연스럽게 데이터를 중심으로 구현하게 된다.</p>

<p><br /></p>

<p>절차 지향의 문제점</p>
<ul>
  <li>데이터 타입이나 의미를 변경해야 할 때, 함께 수정해야 하는 프로시저가 증가한다.</li>
  <li>같은 데이터를 프로시저들이 서로 다른 의미로 사용하는 경우가 발생한다.</li>
</ul>

<p>절차 지향적으로 코드를 구현하는 것은 쉽지만, 데이터 종류가 증가하고 이를 사용하는 프로시저가 증가하게 되면, 여러가지 문제들이 발생하게 되고, 유지 보수가 어렵다.</p>

<p><br /></p>

<h3 id="객체-지향">객체 지향</h3>

<p>객체 지향은 데이터 및 데이터 관련된 프로시저를 객체로 묶는다.</p>

<p>객체는 프로시저를 실행하는데 필요한 만큼의 데이터를 가지며, 객체들이 모여 프로그램을 구성한다.</p>

<p>객체는 자신만의 기능을 제공하며, 각 객체들이 서로 연결되어 다른 객체가 제공하는 기능을 사용할 수 있게 된다.</p>

<p>객체는 다른 객체에 기능을 제공하기 위해 프로시저를 사용하는데, 프로시저는 자신이 속한 객체의 데이터에만 접근할 수 있으며, 다른 객체에 속한 데이터에는 접근할 수 없다.</p>

<p>객체 지향은 객체 별로 데이터와 프로시저를 알맞게 정의해야 한다.</p>

<p>객체 지향적으로 만든 코드는 객체의 데이터를 변경하더라도 해당 객체로만 변화가 집중되고 다른 객체에는 영향을 주지 않으므로, 요구 사항의 변화가 발생했을 때 절차 지향 방식보다 프로그램을 더 쉽게 변경할 수 있다.</p>

<p><br />
<br /></p>

<p>참고 : 개발자가 반드시 정복해야 할 객체 지향과 디자인 패턴 (최범균)</p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[절차지향 vs 객체지향]]></summary></entry><entry><title type="html">Exception</title><link href="http://localhost:4000/Exception/" rel="alternate" type="text/html" title="Exception" /><published>2022-03-08T00:00:00+09:00</published><updated>2022-03-08T00:00:00+09:00</updated><id>http://localhost:4000/Exception</id><content type="html" xml:base="http://localhost:4000/Exception/"><![CDATA[]]></content><author><name>kun</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">싱글턴 패턴</title><link href="http://localhost:4000/java/%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4/" rel="alternate" type="text/html" title="싱글턴 패턴" /><published>2022-02-24T00:00:00+09:00</published><updated>2022-02-24T00:00:00+09:00</updated><id>http://localhost:4000/java/%EC%8B%B1%EA%B8%80%ED%84%B4%20%ED%8C%A8%ED%84%B4</id><content type="html" xml:base="http://localhost:4000/java/%EC%8B%B1%EA%B8%80%ED%84%B4-%ED%8C%A8%ED%84%B4/"><![CDATA[<h2 id="view는-유틸리티-클래스로-싱글턴-패턴으로">View는 유틸리티 클래스로? 싱글턴 패턴으로?</h2>

<p>상태가 없는 클래스들은 모든 메서드를 static 으로 선언하여 유틸리티 클래스로 만들어준다.<br />
하지만 static 메서드가 많아 지게 되면 메모리 측면에서 안 좋아진다.<br />
static 메서드들은 프로그램이 종료할 때까지 static영역에 남아있다.</p>

<p>하지만 상태가 없다고 유틸리티 클래스로 만들기는 무리다.
Controller도 무상태 객체이고 static은 객체 지향 보다는 절차 지향에 가까운 키워드라고 한다.</p>

<p>유틸리티 성격은 아닌데 인스턴스로 여러번 생성되기엔 성격이 적절하지 않을 때, 싱글턴 패턴을 사용해서 인스턴스 생성을 제한할 수 있다.</p>

<p><br /></p>

<h3 id="싱글턴-패턴">싱글턴 패턴</h3>

<p>싱글턴 패턴이란 객체의 인스턴스가 오직 1개만 생성 되는 패턴을 의미한다.
싱글턴 패턴의 이점은 메모리 측면이 있다.
최초 한번의 new 연산자를 통해서 고정된 메모리 영역을 사용하기 때문에 해당 객체에 접근할 때 메모리 낭비를 방지할 수 있다.
그리고 이미 생성된 인스턴스를 활용하면서 속도 측면에서도 이점이 있다.</p>

<p>싱글턴 패턴은 데이터 공유가 쉽다. 싱글톤 인스턴스는 전역으로 사용되기 때문에 다른 클래스 인스턴스들이 접근하여 사용할 수 있다.
하지만 여러 클래스의 인스턴스에서 싱글톤 인스턴스의 데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">view</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">utils.InputValidator</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InputView</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PURCHASE_AMOUNT_INPUT_MESSAGE</span> <span class="o">=</span> <span class="s">"구입금액을 입력해 주세요."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">WINNING_NUMBER_INPUT_MESSAGE</span> <span class="o">=</span> <span class="s">"지난 주 당첨 번호를 입력해 주세요."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">BONUS_BALL_INPUT_MESSAGE</span> <span class="o">=</span> <span class="s">"보너스 볼을 입력해 주세요."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DELIMITER</span> <span class="o">=</span> <span class="s">","</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">InputView</span> <span class="n">inputView</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InputView</span><span class="o">();</span>

    <span class="kd">private</span> <span class="nf">InputView</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">InputView</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">inputView</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">input</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
        <span class="nc">InputValidator</span><span class="o">.</span><span class="na">validateNull</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        <span class="nc">InputValidator</span><span class="o">.</span><span class="na">validateEmpty</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">inputPurchaseAmount</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">PURCHASE_AMOUNT_INPUT_MESSAGE</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">inputWinningNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">WINNING_NUMBER_INPUT_MESSAGE</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">numberValues</span> <span class="o">=</span> <span class="n">toStrings</span><span class="o">(</span><span class="n">input</span><span class="o">());</span>
        <span class="k">return</span> <span class="nf">toNumbers</span><span class="o">(</span><span class="n">numberValues</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">toStrings</span><span class="o">(</span><span class="nc">String</span> <span class="n">stringArray</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">stringArray</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="no">DELIMITER</span><span class="o">))</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">trim</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">toNumbers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">numberValues</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">numberValues</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">)</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">inputBonusBall</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">BONUS_BALL_INPUT_MESSAGE</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">InputView</span> <span class="n">inputView</span> <span class="o">=</span> <span class="nc">InputView</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="nc">OutputView</span> <span class="n">outputView</span> <span class="o">=</span> <span class="nc">OutputView</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="nc">LottoController</span> <span class="n">lottoController</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LottoController</span><span class="o">();</span>

        <span class="nc">LottosDto</span> <span class="n">lottosDto</span> <span class="o">=</span> <span class="n">lottoController</span><span class="o">.</span><span class="na">purchase</span><span class="o">(</span><span class="n">inputView</span><span class="o">.</span><span class="na">inputPurchaseAmount</span><span class="o">());</span>
        <span class="n">outputView</span><span class="o">.</span><span class="na">printPurchasedLotto</span><span class="o">(</span><span class="n">lottosDto</span><span class="o">);</span>

        <span class="n">lottoController</span><span class="o">.</span><span class="na">determineWinningNumber</span><span class="o">(</span><span class="n">inputView</span><span class="o">.</span><span class="na">inputWinningNumber</span><span class="o">(),</span> <span class="n">inputView</span><span class="o">.</span><span class="na">inputBonusBall</span><span class="o">());</span>

        <span class="n">outputView</span><span class="o">.</span><span class="na">printResult</span><span class="o">(</span><span class="n">lottoController</span><span class="o">.</span><span class="na">makeResult</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[View는 유틸리티 클래스로? 싱글턴 패턴으로?]]></summary></entry><entry><title type="html">Enum이란?</title><link href="http://localhost:4000/java/Enum%EC%9D%B4%EB%9E%80/" rel="alternate" type="text/html" title="Enum이란?" /><published>2022-02-23T00:00:00+09:00</published><updated>2022-02-23T00:00:00+09:00</updated><id>http://localhost:4000/java/Enum%EC%9D%B4%EB%9E%80</id><content type="html" xml:base="http://localhost:4000/java/Enum%EC%9D%B4%EB%9E%80/"><![CDATA[]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">캐싱 기법</title><link href="http://localhost:4000/java/%EC%BA%90%EC%8B%B1-%EA%B8%B0%EB%B2%95/" rel="alternate" type="text/html" title="캐싱 기법" /><published>2022-02-22T00:00:00+09:00</published><updated>2022-02-22T00:00:00+09:00</updated><id>http://localhost:4000/java/%EC%BA%90%EC%8B%B1%20%EA%B8%B0%EB%B2%95</id><content type="html" xml:base="http://localhost:4000/java/%EC%BA%90%EC%8B%B1-%EA%B8%B0%EB%B2%95/"><![CDATA[<h2 id="캐싱이란">캐싱이란</h2>

<p>캐시는 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓는 임시 장소를 가리킨다.
캐시는 데이터를 접근해 시간이 오래 걸리는 경우나 다시 계산하는 시간을 절약하고 싶은 경우에 사용한다.
캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간 없이 더 빠른 속도로 데이터에 접근할 수 있다.</p>

<p><br /></p>

<h3 id="java-wrapper-class">Java Wrapper Class</h3>

<p>Java에서는 원시 타입을 참조 타입으로 사용하기 위해 만든 Wrapper 클래스가 있다.
인스턴스는 각각의 주소를 가지고, Wrapper Class 로 생성한 값들은 서로 다른 주소값을 가지기 때문에 실제 값을 비교하기 위해 오버라이딩이 된 <code class="language-plaintext highlighter-rouge">equals()</code> 를 사용한다. <code class="language-plaintext highlighter-rouge">==</code>으로 비교를 한다면 값이 같아도 false가 나올 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="nc">Integer</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">num1</span> <span class="o">==</span> <span class="n">num2</span><span class="o">);</span> <span class="o">-&gt;</span> <span class="n">하지만</span> <span class="kc">true</span> <span class="n">가</span> <span class="n">나온다</span><span class="o">.</span> <span class="n">왜</span><span class="o">?</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="integer의-캐싱">Integer의 캐싱</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">IntegerCache</span> <span class="o">{</span>
        <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="o">-</span><span class="mi">128</span><span class="o">;</span>
        <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">high</span><span class="o">;</span>
        <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Integer</span> <span class="n">cache</span><span class="o">[];</span>

        <span class="kd">static</span> <span class="o">{</span>
            <span class="c1">// high value may be configured by property</span>
            <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">127</span><span class="o">;</span>
            <span class="nc">String</span> <span class="n">integerCacheHighPropValue</span> <span class="o">=</span>
                <span class="no">VM</span><span class="o">.</span><span class="na">getSavedProperty</span><span class="o">(</span><span class="s">"java.lang.Integer.IntegerCache.high"</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">integerCacheHighPropValue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parseInt</span><span class="o">(</span><span class="n">integerCacheHighPropValue</span><span class="o">);</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="mi">127</span><span class="o">);</span>
                    <span class="c1">// Maximum array size is Integer.MAX_VALUE</span>
                    <span class="n">h</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span> <span class="o">-</span> <span class="o">(-</span><span class="n">low</span><span class="o">)</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span><span class="o">(</span> <span class="nc">NumberFormatException</span> <span class="n">nfe</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">// If the property cannot be parsed into an int, ignore it.</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">high</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>

            <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">low</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">cache</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
                <span class="n">cache</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="n">j</span><span class="o">++);</span> <span class="c1">// 인스턴스 미리 생성!!</span>

            <span class="c1">// range [-128, 127] must be interned (JLS7 5.1.7)</span>
            <span class="k">assert</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">high</span> <span class="o">&gt;=</span> <span class="mi">127</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">private</span> <span class="nf">IntegerCache</span><span class="o">()</span> <span class="o">{}</span>
    <span class="o">}</span>


    <span class="nd">@HotSpotIntrinsicCandidate</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Integer</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">low</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">high</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">IntegerCache</span><span class="o">.</span><span class="na">cache</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="o">(-</span><span class="nc">IntegerCache</span><span class="o">.</span><span class="na">low</span><span class="o">)];</span> <span class="c1">// 저장된 값 반환!!</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(</span><span class="n">i</span><span class="o">);</span> <span class="c1">// 새로운 Integer 생성 후 반환!!</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>위의 코드를 보면 low 값인 -128부터 high 값인 127 까지 Integer 인스턴스를 미리 생성하여 cache 배열에 저장하는 것을 볼 수 있다.
<code class="language-plaintext highlighter-rouge">valueOf()</code>는 low와  hight 사이의 값일 경우 IntegerCache의 cache에 저장된 값을 반환하고 그 외의 경우 새로 Integer 인스턴스를 생성하여 반환한다.</p>

<p>이 IntegerCache에서 사용된 캐싱 기법을 Lotto 미션에서도 구현을 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">domain.Lotto</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">utils.ExceptionMessage</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LottoNumber</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MINIMUM_LOTTO_NUMBER</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAXIMUM_LOTTO_NUMBER</span> <span class="o">=</span> <span class="mi">45</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">LottoNumber</span><span class="o">&gt;</span> <span class="no">CACHE</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="no">MINIMUM_LOTTO_NUMBER</span><span class="o">;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="no">MAXIMUM_LOTTO_NUMBER</span><span class="o">;</span> <span class="n">number</span><span class="o">++)</span> <span class="o">{</span>
            <span class="no">CACHE</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="k">new</span> <span class="nc">LottoNumber</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">number</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LottoNumber</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateLottoNumberBound</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateLottoNumberBound</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&lt;</span> <span class="no">MINIMUM_LOTTO_NUMBER</span> <span class="o">||</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="no">MAXIMUM_LOTTO_NUMBER</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="nc">ExceptionMessage</span><span class="o">.</span><span class="na">LOTTO_NUMBER_OUT_OF_BOUND</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">LottoNumber</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">LottoNumber</span> <span class="n">lottoNumber</span> <span class="o">=</span> <span class="no">CACHE</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">lottoNumber</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="no">CACHE</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">number</span><span class="o">,</span> <span class="k">new</span> <span class="nc">LottoNumber</span><span class="o">(</span><span class="n">number</span><span class="o">));</span>
            <span class="n">lottoNumber</span> <span class="o">=</span> <span class="no">CACHE</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">lottoNumber</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">LottoNumber</span><span class="o">&gt;</span> <span class="nf">values</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="no">CACHE</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>1에서 45의 LottoNumber 객체를 미리 만들어놔서 <code class="language-plaintext highlighter-rouge">valueOf()</code>와 <code class="language-plaintext highlighter-rouge">values()</code>를 사용해 숫자가 같은 LottoNumber 인스턴스는 모두 동일한 인스턴스가 된다.
캐싱을 함으로써 발생하는 메모리 낭비 문제를 해결할 수 있다. 
또한 숫자가 같은 LottoNumber는 같은 객체이므로 , equals와 hashcode를 오버라이딩하지 않아도 된다.</p>

<p><br /></p>

<p>참고<br /></p>

<p><a href="https://tecoble.techcourse.co.kr/post/2020-06-24-caching-instance/">https://tecoble.techcourse.co.kr/post/2020-06-24-caching-instance/</a></p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[캐싱이란]]></summary></entry><entry><title type="html">Controller는 무슨 역할을 하는가?</title><link href="http://localhost:4000/java/Controller%EB%8A%94-%EB%AC%B4%EC%8A%A8-%EC%97%AD%ED%95%A0%EC%9D%84-%ED%95%A0%EA%B9%8C/" rel="alternate" type="text/html" title="Controller는 무슨 역할을 하는가?" /><published>2022-02-19T00:00:00+09:00</published><updated>2022-02-19T00:00:00+09:00</updated><id>http://localhost:4000/java/Controller%EB%8A%94%20%EB%AC%B4%EC%8A%A8%20%EC%97%AD%ED%95%A0%EC%9D%84%20%ED%95%A0%EA%B9%8C</id><content type="html" xml:base="http://localhost:4000/java/Controller%EB%8A%94-%EB%AC%B4%EC%8A%A8-%EC%97%AD%ED%95%A0%EC%9D%84-%ED%95%A0%EA%B9%8C/"><![CDATA[<h2 id="controller는-무슨일을-하는가">Controller는 무슨일을 하는가?</h2>

<p>항상 Controller의 로직을 짤 때마다, 의문이 들었다.
Controller는 인스턴스의 상태를 가지고 있지 않기 때문에 유틸리티 클래스로 만들어줘도 되지 않을까? 
Controller 같이 모든 코드를 조립해주는 클래스들을 어떻게 해야 더 객체지향적인 코드로 설계할 수 있을까?</p>

<p>리뷰어님께 이러한 궁금증들을 여쭤보게 되었고, <code class="language-plaintext highlighter-rouge">View가 Controller로 넘어와도 될까요?</code> 라는 역질문을 받게 되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Game</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">cars</span> <span class="o">=</span> <span class="nc">CarFactory</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="nc">InputView</span><span class="o">.</span><span class="na">inputCarNames</span><span class="o">());</span>
		<span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="nc">InputView</span><span class="o">.</span><span class="na">inputGameCount</span><span class="o">();</span>
		<span class="nc">OutputView</span><span class="o">.</span><span class="na">printGameResultTitle</span><span class="o">();</span>
		<span class="n">play</span><span class="o">(</span><span class="n">cars</span><span class="o">);</span>
		<span class="n">showResult</span><span class="o">(</span><span class="n">cars</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="nf">play</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">cars</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Car</span> <span class="n">car</span> <span class="o">:</span> <span class="n">cars</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">Referee</span><span class="o">.</span><span class="na">judgeCarMove</span><span class="o">(</span><span class="n">car</span><span class="o">,</span> <span class="n">makeRandomValue</span><span class="o">());</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">cars</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">showResult</span><span class="o">(</span><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">cars</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="nc">Car</span> <span class="n">car</span> <span class="o">:</span> <span class="n">cars</span><span class="o">)</span> <span class="o">{</span>
			<span class="nc">OutputView</span><span class="o">.</span><span class="na">printLineString</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
		<span class="o">}</span>
		<span class="nc">OutputView</span><span class="o">.</span><span class="na">printBlankLine</span><span class="o">();</span>
	<span class="o">}</span>


</code></pre></div></div>

<p>지금과 같은 경우에는 View가 Console이기 때문에, Controller에서 View를 직접 반환하기 때문에 위와 같은 구조가 되겠지만, 추후에 App이나 Web의 경우에는 사용할 수 없는 구조이다.
그리고 view가 controller와 결합성이 높게 되면 도메인이 영향을 받을 가능성이 높아지고 controller가 하나의 view에 종속적일 수 밖에 없다.</p>

<p>그래서 controller에 들어오기 전에 View를 통해 input을 받고 입력받은 String값을 controller에 넘겨주고, output의 경우에도 Controller에서 return한 값을 output에 전달하는 방식을 제안해주셨다.
직접 View를 전달하는 것이 아닌, 서버에서는 API를 넘기고 front 작업을 따로 하는 형식이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GameController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">NEGATIVE_ERROR_MESSAGE</span> <span class="o">=</span> <span class="s">"[ERROR] 음수를 입력할 수 없습니다"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">ERROR_CRITERIA_VALUE_ZERO</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">Cars</span> <span class="n">cars</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createCars</span><span class="o">(</span><span class="nc">String</span> <span class="n">carNames</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cars</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cars</span><span class="o">(</span><span class="nc">CarFactory</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">carNames</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">createGameCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">gameCount</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">validateGameCount</span><span class="o">(</span><span class="n">gameCount</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="nf">validateGameCount</span><span class="o">(</span><span class="kt">int</span> <span class="n">gameCount</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">gameCount</span> <span class="o">&lt;</span> <span class="no">ERROR_CRITERIA_VALUE_ZERO</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="no">NEGATIVE_ERROR_MESSAGE</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">gameCount</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TotalCarsDto</span> <span class="nf">play</span><span class="o">(</span><span class="kt">int</span> <span class="n">gameCount</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">CarsDto</span><span class="o">&gt;</span> <span class="n">carsDtos</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">gameCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">carsDtos</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cars</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="k">new</span> <span class="nc">RandomNumberGenerator</span><span class="o">()));</span>
        <span class="o">}</span>
        <span class="nc">WinnerCarsDto</span> <span class="n">winnerCarsDto</span> <span class="o">=</span> <span class="n">cars</span><span class="o">.</span><span class="na">judgeWinner</span><span class="o">();</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TotalCarsDto</span><span class="o">(</span><span class="n">carsDtos</span><span class="o">,</span> <span class="n">winnerCarsDto</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 코드를 짜보니 Controller의 역할에 더 실감할 수 있었다.
View와 데이터를 주고 받으며 Car 객체들을 만들고 움직이게하고 우승자를 판정하는 등의 비즈니스 로직들을 실행시키는 역할을 하는 것이다.
Controller는 외부에서 요청이 들어오는 것을 처리해주고, View에서 필요한 데이터들을 보내주는 역할을 한다.</p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[Controller는 무슨일을 하는가?]]></summary></entry><entry><title type="html">인터페이스를 분리해 테스트 코드 하기 좋은 메서드로 만들기</title><link href="http://localhost:4000/java/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/" rel="alternate" type="text/html" title="인터페이스를 분리해 테스트 코드 하기 좋은 메서드로 만들기" /><published>2022-02-18T00:00:00+09:00</published><updated>2022-02-18T00:00:00+09:00</updated><id>http://localhost:4000/java/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC%20%EB%B6%84%EB%A6%AC%ED%95%B4%20%ED%85%8C%EC%8A%A4%ED%8A%B8%20%EC%BD%94%EB%93%9C%20%ED%95%98%EA%B8%B0%20%EC%A2%8B%EC%9D%80%20%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/java/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%ED%95%98%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0/"><![CDATA[<h2 id="전략-패턴을-사용하여-테스트-하기">전략 패턴을 사용하여 테스트 하기</h2>

<p>자동차 경주 게임 에서, <code class="language-plaintext highlighter-rouge">자동차는 부여받는 Random 값이 4이상일 경우, 전진할 수 있고, 4 미만일 경우에는 전진하지 못한다</code>라는 요구 사항이 있다.
랜덤값 같은 테스트하기 어려운 대상에 대해, 테스트 코드를 작성하기 쉬운 메서드로 만드는 방법은 테스트하기 어려운 대상을 매개변수를 통해 전달받도록 수정하여 메서드가 직접적인 의존을 가지지 않게 하는 방법이었다.</p>

<p>그러나, 테스트를 어렵게 만드는 대상을 상위로 이동시키는 것에 불과하다.</p>

<ul>
  <li>Car.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">randomValue</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">randomValue</span> <span class="o">&gt;</span> <span class="no">MOVE_CRITERIA</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">position</span><span class="o">++;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Cars.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">CarsDto</span> <span class="nf">move</span><span class="o">(</span><span class="kt">int</span> <span class="n">randomValue</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span><span class="o">(</span><span class="nc">Car</span> <span class="n">car</span> <span class="o">:</span> <span class="n">cars</span><span class="o">){</span>
    <span class="n">car</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">randomValue</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="nc">CarsDto</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">cars</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>CarController.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">CarsDto</span> <span class="nf">play</span><span class="o">(</span><span class="kt">int</span> <span class="n">gameCount</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
  <span class="k">return</span> <span class="n">cars</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>실제 랜덤값을 사용하고 있는 Car의 <code class="language-plaintext highlighter-rouge">move()</code> -&gt; car객체들을 움직이게 해주는 cars의 <code class="language-plaintext highlighter-rouge">move()</code> -&gt; 랜덤값을 생성해주는 CarController의 <code class="language-plaintext highlighter-rouge">play()</code></p>

<p>이 처럼, 계속 테스트하기 어려운 대상을 상위로 올라가게 된다. 
실제로 값을 사용하는 곳이 아닌 상위의 어떤 곳에서 값을 생성해서 넘겨주기 때문에 로직과 관련된 응집성이 떨어지게 된다.
그리고 GameController에서 random값을 생성하는 곳의 테스트가 어려웠을것이다.</p>

<p><br /></p>

<p>그렇다면 Car의 응집도는 그대로 유지한채, 테스트하기 좋은 메서드로 어떻게 만들까?
그리고 <code class="language-plaintext highlighter-rouge">move()</code> 를 테스트하고자 하는게 무엇일까?
<code class="language-plaintext highlighter-rouge">move()</code> 가 받는 값이 랜덤값이든 의도한 값이든 4 이상이면 Car의 position을 증가시키고 4 미만일 경우에는 position을 그대로 유지하면 된다.
그렇다면 프로덕션 코드가 동작하는 곳에서는 <code class="language-plaintext highlighter-rouge">move()</code>가 랜덤 값을 받게 하고 테스트 코드에서는 의도한 값을 받도록 한다. 
이 방법을 가능하도록 하는 것이 인터페이스 분리다.</p>

<ul>
  <li>NumberGenerator.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NumberGenerator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">generateNumber</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>RandomNumberGenerator.java (프로덕션 코드에서 사용)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RandomNumberGenerator</span> <span class="kd">implements</span> <span class="nc">NumberGenerator</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">RANDOM_NUMBER_BOUND</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">generateNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="no">RANDOM_NUMBER_BOUND</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>MovableNumberGenerator.java (테스트 코드에서 사용 - 전진 테스트)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovableNumberGenerator</span> <span class="kd">implements</span> <span class="nc">NumberGenerator</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MOVABLE_VALUE</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">generateNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">MOVABLE_VALUE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>NonMovableNumberGenerator.java (테스트 코드에서 사용 - 전진X 테스트)</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NonMovableNumberGenerator</span> <span class="kd">implements</span> <span class="nc">NumberGenerator</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">NON_MOVABLE_VALUE</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">generateNumber</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">NON_MOVABLE_VALUE</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>Car.java</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">move</span><span class="o">(</span><span class="nc">NumberGenerator</span> <span class="n">numberGenerator</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">numberGenerator</span><span class="o">.</span><span class="na">generateNumber</span><span class="o">();</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="no">MOVE_CRITERIA</span><span class="o">)</span> <span class="o">{</span>
    	<span class="n">position</span><span class="o">.</span><span class="na">increase</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">move()</code> 메서드에서 숫자를 생성하는 역할을 담당하는 NumberGenerator 인터페이스의 구현체를 정의하였다.
랜덤값을 생성해주는 부분을 interface로 분리를 하게 되면서 테스트를 걱정 하지 않게 되었다.
이때 interface의 의존성을 어디에서 가질 것이냐만 고민하면 되는데, 이 의존성을 interface의 로직을 실제로 사용하는 Car에서 가짐으로써 응집도를 높일 수 있다.</p>]]></content><author><name>kun</name></author><category term="java" /><summary type="html"><![CDATA[전략 패턴을 사용하여 테스트 하기]]></summary></entry></feed>
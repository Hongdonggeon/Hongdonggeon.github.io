I"gG<h1 id="자바-8-9-10-11-무슨일이-일어나고-있는가">자바 8, 9, 10, 11 무슨일이 일어나고 있는가</h1>

<p>자바 8은 간결한 코드, 멀티코어 프로세서의 쉬운 활용이라는 두 가지 요구사항을 기반으로 한다.<br /></p>

<p>자바 8이 등장하기 이전의 자바 프로그램은 코어 중 하나만을 사용했다.<br />그래서 나머지 코어를 활용하려면 스레드를 사용하는 것이 좋다는 말이 있었다.<br />하지만 스레드를 사용하면 관리하기 어렵고 많은 문제가 발생할 수 있다는 단점이 있다.<br />자바 8에서는 병렬 실행을 새롭고 단순한 방식으로 접근할 수 있는 방법을 제공한다.<br /></p>

<p><strong>자바 8의 새로운 기술</strong></p>

<ul>
  <li>스트림 API -&gt; 병렬 연산 지원 (synchronized 키워드를 사용하지 않아도 된다.)</li>
  <li>메서드에 코드를 전달하는 기법 -&gt; 동작 파라미터 구현 가능, 함수형 프로그래밍에서 많이 사용된다.</li>
  <li>인터페이스의 디폴트 메서드 -&gt; 인터페이스의 구현체 클래스들을 다 수정하지 않아도 된다.</li>
</ul>

<p><br /></p>

<h2 id="자바-함수">자바 함수</h2>

<p>프로그래밍 언어에서 함수라는 용어는 메서드, 특히 정적 메서드와 같은 의미로 사용된다.<br />자바 8에서는 함수를 새로운 값의 형식으로 추가했다.<br />이는 멀티코어에서 병렬 프로그래밍을 활용할 수 있는 스트림과 연계될 수 있도록 함수를 만들었기 때문이다.</p>

<ul>
  <li>자바 프로그램에서의 조작할 수 있는 값 -&gt; primitive type과 객체의 값<br />ex) 42(int), “abc”(String), new HashMap()&lt;Integer, String&gt;</li>
</ul>

<p><strong>프로그래밍 언어의 핵심은 값을 바꾸는 것이다.</strong><br />전통적으로 프로그래밍 언어에서는 조작할 수 있는 값을 일급값 또는 일급시민이라고 부른다.</p>

<p>또는 다양한 구조체(메서드, 클래스)가 값의 구조를 표현하는데 도움이 될 수 있다.<br />하지만 프로그램을 실행하는 동안 이러한 모든 구조체를 자유롭게 전달할 수는 없다.<br />이렇게 전달할 수 없는 구조체는 이급 시민이다. ex) 메서드, 클래스 -&gt; 그 자체로 값이 될 수 없다.</p>

<p>메서드를 일급 시민으로 만들면 프로그래밍에 유용하게 활용할 수 있다. (자바8에서 이급 시민을 일급 시민으로 바꿀 수 있는 기능 추가)</p>

<p><br /></p>

<h3 id="메서드와-람다를-일급-시민으로">메서드와 람다를 일급 시민으로</h3>

<p><strong>메서드 참조</strong></p>

<ul>
  <li>메서드 참조 사용하기 전</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">File</span><span class="o">[]</span> <span class="n">hiddenFiles</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">","</span><span class="o">).</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">File</span> <span class="n">pathname</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">pathname</span><span class="o">.</span><span class="na">isHidden</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">});</span>
</code></pre></div></div>

<p>File 클래스에는 이미 isHidden이라는 메서드가 있는데 왜 굳이 FileFileter로 감싼 다음에 FileFilter를 인스턴스화해야 하나?</p>

<ul>
  <li>메서드 참조 사용</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">File</span><span class="o">[]</span> <span class="n">hiddenFiles2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"."</span><span class="o">).</span><span class="na">listFiles</span><span class="o">(</span><span class="nl">File:</span><span class="o">:</span><span class="n">isHidden</span><span class="o">);</span>
</code></pre></div></div>

<p>isHidden이라는 메서드가 File 클래스에 준비되어 있으므로 메서드 참조를 이용해서 listFiles에 직접 전달하였다.<br /></p>

<p><code class="language-plaintext highlighter-rouge">::</code>  : 메서드를 값으로 사용해라</p>

<p><br /></p>

<p><strong>람다 : 익명함수</strong></p>

<p>메서드를 일급값으로 취급할 뿐 아니라 람다(또는 익명함수)를 포함하여 함수도 값으로 취급할 수 있다.<br />직접 메서드를 정의해서 메서드 참조를 이용할 수도 있지만, 이용할 수 있는 편리한 클래스나 메서드가 없을 때 새로운 람다 문법을 이용하면 더 간결한 코드를 작성할 수 있다.<br /></p>

<p><strong>람다 문법 형식으로 구현된 프로그램을 함수형 프로그래밍, 즉 함수를 일급값으로 넘겨주는 프로그램을 구현한다.</strong></p>

<p><br /></p>

<p><strong>예시</strong></p>

<p>Apple 클래스가 존재하고 Apple 객체의 무게를 반환해주는 getWeight() 이라는 메서드가 존재한다.<br />Apple 타입의 리스트에서 무게가 150보다 큰 Apple 객체들을 필터링하는 작업을 해볼 것이다.</p>

<ul>
  <li>메서드를 전달하지 않은 코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="nf">filterHeavyApples</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">inventory</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Applie</span> <span class="n">apple</span> <span class="o">:</span> <span class="n">inventory</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">apple</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">)</span> <span class="o">{</span>
                  <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
               <span class="o">}</span>
            <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>단점 : 다른 기준으로 필터링하는 코드를 작성할 때, 거의 동일한 코드가 여러번 반복된다.<br /></p>

<ul>
  <li>메서드를 전달하는 코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="nf">filterApples</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">inventory</span><span class="o">,</span> <span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
          <span class="k">for</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">apple</span> <span class="o">:</span> <span class="n">inventory</span><span class="o">){</span>
              <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">apple</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
                <span class="o">}</span>
              <span class="o">}</span>
    <span class="o">}</span> 

<span class="c1">// 사용할 때</span>
	<span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="nl">Apple:</span><span class="o">:</span><span class="n">isGreenApple</span><span class="o">);</span>
	<span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="nl">APPLE:</span><span class="o">:</span><span class="n">isHeavyApple</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="메서드-전달에서-람다로">메서드 전달에서 람다로</h3>

<p>메서드를 값으로 전달하는 것은 분명 유용한 기능이다.<br />하지만 한 두번만 사용할 메서드를 매번 정의하는 것은 귀찮은 일이다.<br />자바 8에서는 람다를 사용해서 코드를 구현할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">a</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">);</span>
	<span class="n">filterApples</span><span class="o">(</span><span class="n">inventory</span><span class="o">,</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">a</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="no">GREEN</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">getColor</span><span class="o">()));</span>
</code></pre></div></div>

<p>한 번만 사용할 메서드는 따로 정의를 구현할 필요가 없지만 람다가 몇 줄 이상으로 길어진다면 익명 람다 보다는 코드가 수행하는 일을 잘 설명하는 이름을 가진 메서드를 정의하고 메서드 참조를 활용하는 것이 바람직하다.<br />코드의 명확성이 우선시되어야 한다.</p>

<p>위에서 filterApples라는 새로운 메서드를 정의하였는데, 라이브러리 메서드 filter를 사용하면 메서드를 구현할 필요가 없다.<br />자바 8에서는 filter와 비슷한 동작을 수행하는 연산집합을 포함하는 새로운 스트림 API를 제공한다.</p>

<p><br /><br /></p>

<h2 id="스트림">스트림</h2>

<p>거의 모든 자바 어플리케이션은 컬렉션을 만들고 활용한다.<br />스트림 API를 이용하면 컬렉션 API와는 상당히 다른 방식으로 데이터를 처리할 수 있다.</p>

<ul>
  <li>컬렉션
    <ul>
      <li>반복 과정 직접 처리 (외부 반복)</li>
    </ul>
  </li>
  <li>스트림 API
    <ul>
      <li>라이브러리 내부에서 모든 데이터 처리 (내부 반복)</li>
    </ul>
  </li>
</ul>

<p>많은 요소를 가진 목록을 반복한다면 오랜 시간이 걸릴 수 있다.<br />단일 cpu로는 거대한 데이터를 처리하기 힘들다. 하지만 우리는 현재 대부분 멀티 코어 cpu를 사용한다.<br />따라서 서로 다른 cpu 코어에 작업을 각각 할당해서 처리 시간을 줄일 수 있다면 좋다.</p>

<p><br /></p>

<h3 id="멀티스레딩은-어렵다">멀티스레딩은 어렵다</h3>

<p>스레드 API로 멀티스레딩 코드를 구현해서 병렬성을 이용하는 것은 쉽지 않다.<br />멀티 스레딩 환경에서 각각의 스레드는 동시에 공유된 데이터에 접근하고, 데이터를 갱신할 수 있는데 스레드를 잘 제어하지 못하면 원치 않은 방식으로 바뀐다.</p>

<p>하지만 자바 8에서 부터 스트림 API로 ‘컬렉션을 처리하면서 발생하는 모호함과 반복적인 코드 문제’, ‘멀티코어 활용 어려움’ 이라는 2가지 문제를 모두 해결했다.<br />기존의 컬렉션에서는 데이터를 처리할 때 반복되는 패턴이 너무 많았는데, 라이브러리에서 이러한 반복되는 패턴을 제공한다면 좋을 것이라는 아이디어가 변화의 동기가 되었다.<br />자주 반복되는 패턴으로 데이터를 필터링, 추출, 그룹화 등의 기능이 있다.<br />또한 이러한 동작들을 쉽게 병렬화할 수 있다는 점도 변화의 동기가 되었다.</p>

<p><img src="https://user-images.githubusercontent.com/67885363/153752496-cf7a56fc-7077-4ea3-b419-69c49560a7cf.png" alt="image" /></p>

<ul>
  <li>포킹 단계<br />두 cpu를 가진 환경에서 리스트를 필터링할 때 한 cpu는 리스트의 앞부분을 처리하고, 다른 cpu는 리스트의 뒷부분을 처리하도록 요청할 수 있다.</li>
  <li>각각의 cpu는 자신이 맡은 절반의 리스트를 처리한다.</li>
  <li>마지막으로 하나의 cpu가 두 결과를 정리한다.</li>
</ul>

<p><strong>컬렉션은 어떻게 데이터를 저장하고 접근할지에 중점을 두고, 스트림은 데이터에 어떤 계산을 할 것인지 묘사하는 것에 중점을 둔다.</strong></p>

<p>스트림은 스트림 내의 요소를 쉽게 병렬로 처리할 수 있는 환경을 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">heavyApples</span> <span class="o">=</span> <span class="n">inventory</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>
                                     <span class="o">.</span><span class="na">filter</span><span class="o">(</span> <span class="o">(</span><span class="nc">Apple</span> <span class="n">a</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span><span class="o">.</span><span class="na">getWeight</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">150</span><span class="o">)</span>
                                     <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="디폴트-메서드와-자바-모듈">디폴트 메서드와 자바 모듈</h2>

<p>요즘은 외부에서 만들어진 컴포넌트를 이용해 시스템을 구축하는 경향이 있다.<br />지금까지 자바에서는 특별한 구조가 아닌 평범한 자바 패키지 집합을 포함하는 JAR파일을 제공하는 것이 전부였다.<br />게다가 패키지의 인터페이스를 바꿔야 하는 상황에서는 인터페이스를 구현하는 모든 클래스의 구현을 바꿔야 했으므로 정말 고통스러운 작업이었다.</p>

<p>자바8에서는 인터페이스를 쉽게 바꿀 수 있도록 디폴트 메서드를 지원한다.<br />디폴트 메서드는 특정 프로그램을 구현하는데 도움을 주는 기능이 아니라 미래에 프로그램이 쉽게 변화할 수 있는 환경을 제공하는 기능이다.</p>

<p>현재 Collection 인터페이스에는 stream이라는 메서드가 정의되지 않았다고 가정하자.<br />List의 스트림이 사용된 코드를 컴파일 되게 하기 위해서는 직접 Collection 인터페이스에 stream 메서드를 추가하고 ArrayList 클래스에서 메서드를 구현해야 한다.<br />하지만 이미 컬렉션 API의 인터페이스를 구현하는 많은 컬렉션 프레임워크가 존재하는데 인터페이스를 구현한 모든 클래스는 새로 추가된 메서드를 구현해야 한다.<br />현실적으로 언어 설계자들이 인터페이스에 구현한 모든 코드를 책임질 수 없기에, 자바 8은 구현 클래스에서 구현하지 않아도 되는 메서드를 인터페이스에 추가할 수 있는 기능을 제공한다.<br />이러한 메서드를 디폴트 메서드라고 부르고 메서드 본문은 클래스 구현이 아니라 인터페이스의 일부로 포함된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">default</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

:ET
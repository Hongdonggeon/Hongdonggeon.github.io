I"C/<p>우테코 첫 미션으로 TDD 기법을 사용해 자동차 경주 게임을 구현한다.<br />
이전에 프로덕션 코드를 작성하고 간단한 단위 테스트 코드를 작성한 적은 있지만 TDD는 처음이다.<br />
지금까지는 Junit은 테스트 코드를 작성하게 지원해주는 라이브러리 정도라고만 알고 있었는데, Junit에 대해 궁금증이 생겨 정리해보았다.<br /></p>

<h1 id="junit5">Junit5</h1>

<hr />

<p>Junit5는 이전 버전과 다르게 세개의 서브 프로젝트로 이루어져 있다.
Junit5은 <code class="language-plaintext highlighter-rouge">Junit Platform</code> + <code class="language-plaintext highlighter-rouge">Junit Jupiter</code> + <code class="language-plaintext highlighter-rouge">Junit Vintage</code> 이 3개가 합쳐진 것이다.</p>

<ul>
  <li>
    <p><strong>Junit Platform</strong><br />
  Junit Platform은 JVM 테스트 프레임워크를 실행하는데 기초를 제공한다.
  또한 TestEngine API를 제공해 테스트 프레임워크를 개발할 수 있다.</p>
  </li>
  <li>
    <p><strong>Junit Jupiter</strong><br />
  Junit Jupiter는 Junit 5에서 테스트를 작성하고 확장 하기 위한 새로운 프로그래밍 모델과 확장 모델의 조합이다.</p>
  </li>
  <li>
    <p><strong>Junit Vintage</strong><br />
  Junit Vintage는 하위 호환성을 위해 Junit3과 Junit4를 기반으로 돌아가는 플랫폼에 테스트 엔진을 제공한다.</p>
  </li>
</ul>

<h3 id="displayname">@DisplayName</h3>

<p>테스트 클래스나 테스트 메서드에 이름을 붙여줄 때 사용한다.
테스트를 실행했을 때, 디폴트값은 메서드 이름인데, <code class="language-plaintext highlighter-rouge">@DisplayName</code>을 붙여주면 <code class="language-plaintext highlighter-rouge">@DisplayName</code>의 내용이 출력된다.</p>

<p><br /></p>

<h3 id="beforeeach">@BeforeEach</h3>

<p>각각 테스트 메서드가 실행되기전에 실행되어야 하는 메서드를 명시해준다.
<code class="language-plaintext highlighter-rouge">@Test</code>, <code class="language-plaintext highlighter-rouge">@RepeatedTest</code>, <code class="language-plaintext highlighter-rouge">@ParameterizedTest</code>, <code class="language-plaintext highlighter-rouge">@TestFactory</code> 가 붙은 테스트 메서드가 실행하기 전에 실행된다.
Junit4의 <code class="language-plaintext highlighter-rouge">@Before</code> 와 같은 역할을 한다.</p>

<p><br /></p>

<h3 id="parameterizedtest">@ParameterizedTest</h3>

<p>파라미터화 테스트는 각각 다른 인자로 여러 번 테스트를 돌린다.
호출 시 사용될 인자를 적어도 하나는 적어줘야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@ParameterizedTest</span>
	<span class="nd">@ValueSource</span><span class="o">(</span><span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">})</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Set값 전체 존재 확인"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">set값_전체_존재_확인</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">value</span><span class="o">)).</span><span class="na">isTrue</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ValueSource</code>  :  간단하게 하나의 배열로 값을 정의하며, 하나의 인자만 받는 파라미터화 테스트에만 적용할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@NullSource</code> : <code class="language-plaintext highlighter-rouge">@ParameterizedTest</code> 메서드에 null을 제공한다.</li>
  <li><code class="language-plaintext highlighter-rouge">@EmptySource</code> : 배열 같은 인자에 빈값을 제공한다.</li>
</ul>

<p><br /></p>

<h3 id="csvsource">@CsvSource</h3>

<p><code class="language-plaintext highlighter-rouge">@CsvSource</code> 는 리스트를 delimeter 속성의 구분자로 구분해 준다.
delimeter 속성에 아무것도 입력하지 않는다면 기본값은 콤마를 사용한다.
delimeterString 속성을 쓰면 문자 대신 문자열로 구분자를 사용할 수도 있다.
그러나 delimeter 속성과 delimeterString을 동시에 사용하면 안된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ParameterizedTest</span>
	<span class="nd">@CsvSource</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="o">{</span><span class="s">"1:true"</span><span class="o">,</span> <span class="s">"2:True"</span><span class="o">,</span> <span class="s">"3:true"</span><span class="o">,</span> <span class="s">"4:false"</span><span class="o">,</span> <span class="s">"5:false"</span><span class="o">},</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="sc">':'</span><span class="o">)</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Set값 존재 여부 구별"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">set값_존재_여부_구별</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">assertThat</span><span class="o">(</span><span class="n">numbers</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">value</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="assertions">Assertions</h3>

<p>JUnit Jupiter는 JUnit4로부터 온 assertion 메소드와 새롭게 자바 8 람다 표현식으로 추가된 메소드들이 있다. 
모든 JUnit Jupiter assertion은 정적 메소드이며, <code class="language-plaintext highlighter-rouge">org.junit.jupiter.api.Assertions</code> 클래스 안에 있다.</p>

<p><br /></p>

<h1 id="assertj란-무엇인가">AssertJ란 무엇인가</h1>

<hr />

<p>AsserJ는 많은 assertion을 제공하는 자바 라이브러리다.
에러 메세지와 테스트 코드의 가독성을 매우 높여준다.
<code class="language-plaintext highlighter-rouge">Junit</code>에서 제공하는 assertEquals에 비해 가독성이 더 좋다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">actual</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">expected</span><span class="o">);</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="exception-처리-test">Exception 처리 test</h3>

<ul>
  <li><strong>assertThatThrownBy()</strong> 
예외 처리를 가독성 있게 테스트할 수 있게 해준다.
기존에는 Throwable을 가지고 검증 했다면, 좀 더 나은 가독성으로 작성하게 해준다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">공백_이름</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">assertThatThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">Car</span><span class="o">(</span><span class="s">""</span><span class="o">))</span>
			<span class="o">.</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="nc">IllegalArgumentException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
			<span class="o">.</span><span class="na">hasMessage</span><span class="o">(</span><span class="no">EMPTY_NAME_ERROR</span><span class="o">);</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><strong>assertThatExceptionOfType</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"IndexOutOfBoundsException 발생"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">indexOutOfBoundsException_발생</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">assertThatExceptionOfType</span><span class="o">(</span><span class="nc">IndexOutOfBoundsException</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">isThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"abc"</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">errorIndex</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
			<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">errorIndex</span><span class="o">));</span>
		<span class="o">});</span>
	<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>AssertJ에서 자주 발생하는 예외들에 대해 정의된 함수를 제공한다.
<code class="language-plaintext highlighter-rouge">NullPointerException</code>, <code class="language-plaintext highlighter-rouge">IllegalArgumentException</code>, <code class="language-plaintext highlighter-rouge">IllegalStateException</code>, <code class="language-plaintext highlighter-rouge">IOException</code>이 있다.</p>

<ul>
  <li><strong>assertThatIoException</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nd">@Test</span>
	<span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"Exception Message 검사"</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="n">exception_message_검사</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">assertThatIOException</span><span class="o">().</span><span class="na">isThrownBy</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">"exception message test"</span><span class="o">);</span>
		<span class="o">}).</span><span class="na">withMessage</span><span class="o">(</span><span class="s">"exception message test"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>출처
https://pjh3749.tistory.com/241</p>

:ET